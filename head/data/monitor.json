{
  "_id"  : "monitor",
  "type" : "control_template",
  "page_class" : "db_monitor_class",
  "body" : """
            <h1 >Monitor</h1>
            <div data-role='controlgroup' data-type='horizontal'>
                <a href='#' data-role='button' data-inline='true' class='makeNewPlot ui-disabled'>Insert New Graph</a>
                <label><input type='checkbox' class='edit_layout'/>Edit layout</label>
                <label><input type='checkbox' class='edit_variables'/>Adjust variables</label>
                <label><input type='checkbox' class='win_nums'/>Show window numbers</label>
            </div>
            <div data-role='controlgroup' data-type='horizontal'>
                <select class='selectCurrentPlot ui-disabled'>
                </select>
                <a href='#' data-role='button' data-inline='true' class='addSlowControl ui-disabled'>Add to selected graph</a>
                <select class='selectSlowControl ui-disabled' multiple='multiple' data-native-menu='false'>
                  <option>Available variables:</option>
                </select>
            </div>

            <div class='monitor_div gridster'>
            </div>
""",
   "script" : """
        var graph_template;
        var gridster,
            isEditing = false,
            showWindowNumbers = false,
            isEditingVars = false;
            isInitialized = false;
        var cookie = require('js-cookie');
        var delete_btn_txt = "<div class='header'><button class='delete_over_var ui-btn ui-shadow ui-corner-all ui-icon-minus ui-btn-icon-notext'>Delete</button></div><div class='window_designation'></div>";

        function resize(ev, ui, $widget) {
            $widget.data('obj').resize();
        }
        function serializePositions($w, wgd) {
          return {
            col: wgd.col,
            row: wgd.row,
            size_x: wgd.size_x,
            size_y: wgd.size_y,
            variables: $w.data().obj.graph().name()
          };
        }
        function get_gridster() {
          if (gridster) return gridster;
          $('.gridster', theCurrentPage).empty();
          $('.gridster', theCurrentPage).append($('<ul/>'));
          gridster = $('.gridster > ul', theCurrentPage).gridster({
              widget_base_dimensions: [100, 100],
              //widget_class: ".widget",
              widget_margins: [5, 5],
              helper: 'clone',
              draggable: {
                  handle: ".header"
              },
              autogrow_cols : true,
              serialize_params : serializePositions,
              resize: {
                  enabled: true,
                  stop: resize,
                  resize: resize
              }
          }).data('gridster');
          return gridster;
        }

        function makeNewGraph(info) {
            var selection = $('.selectCurrentPlot', theCurrentPage).filter(':input');
            var select_length = selection.find('option').length;
            var window_num = select_length;
            if (window_num > 0) {
                window_num = parseInt($('option:last-child', selection).val()) + 1;
            }
            var position = info.position;
            position.unshift("<li>" + delete_btn_txt + graph_template.html + "</li>");
            var grid = get_gridster();
            if (position[1] > grid.cols) {
                position[1] = grid.cols;
            }
            if (position[2] > grid.rows) {
                position[2] = grid.rows;
            }
            var new_div = grid.add_widget.apply(grid, position);
            new_div.data("obj", new graph_template.script(new_div))
                   .data("window_num", window_num);
            new_div.data("obj").add_plot(info.variables);
            $('.window_designation', new_div).text(window_num);
            selection.append($('<option/>').attr( { value : window_num } )
                                           .append('Window ' + window_num)
                                           .data( { reference : new_div,
                                                    num : window_num } ));
            $('.delete_over_var', new_div).on("click", removeWindow);
            selection[0].selectedIndex = select_length;
            // Now deal with the other buttons
            selection.removeClass('ui-disabled');
            var ssc = $('.selectSlowControl', theCurrentPage).filter(':input');
            ssc.removeClass('ui-disabled');
            if (ssc.find('option').length !== 0) {
                $('.addSlowControl', theCurrentPage).removeClass('ui-disabled');
            }
            selection.selectmenu('refresh', true);
            updateEditing();
            return $(':selected', $(selection));
            // Begin additional functions
        } // makeNewGraph

        function removeWindow(ev) {
          var li = $(ev.currentTarget).closest('li');
          li.data('obj').remove();
          gridster.remove_widget(li);
          $('.selectCurrentPlot [value=' + li.data('window_num') + ']', theCurrentPage).remove();
          $('select.selectCurrentPlot', theCurrentPage).selectmenu('refresh');
        }

        function destroyGraph(ev) {
            removeWindow(selected);
            if (sIndex !== 0) sIndex--;
            scp[0].selectedIndex = sIndex;

            // Update the buttons.
            if (scp.find('option').length === 0) {
              // disable button if nothing is there
              $('.addSlowControl', thispage).addClass('ui-disabled');
              $('.selectSlowControl', thispage).filter(':input').addClass('ui-disabled');
            }
            scp.selectmenu('refresh', true);
        } // destroyGraph

        function populateGraphsFromState() {
           getSavedState().forEach( function(o) {
             makeNewGraph(o);
           });
        }

        function getAvailableItems() {
			// We can have stale = update_after since the data types will not
			// change all that often.
            nedm.get_database().getVariableNames( function(allnames) {
                        var ssc = $('.selectSlowControl', theCurrentPage).filter(':input');
                        ssc.find('option').remove();
                        allnames.forEach( function (aname) {
                          ssc.append($('<option/>').attr({value : aname}).append(aname));
                        });
                        if (ssc.find('option').length !== 0) {
                            ssc.removeClass('ui-disabled');
                            if ($('.selectCurrentPlot', theCurrentPage).find('option').length !== 0) {
                                $('.addSlowControl', theCurrentPage).removeClass('ui-disabled');
                            }
                        }
                        ssc.selectmenu('refresh', true);
            });

        } // getAvailableItems

        function saveCurrentState() {
          nedm.globalSetting("monitor_" + nedm.get_database().db_name(), get_gridster().serialize());
        }
        function getSavedState() {
          return (nedm.globalSetting("monitor_" + nedm.get_database().db_name()) || [])
            .map( function(o) {
                   return { position: [o.size_x, o.size_y, o.col, o.row], variables: o.variables };
                });
        }

        function addSelectedPlotToWindow() {
            var scp = $('.selectCurrentPlot :selected', theCurrentPage).data();
            var the_div = scp.reference;
            var win_num = scp.num;
            var ssc = $.makeArray($('.selectSlowControl :selected')
                       .map(function() { return $(this).val(); }));
            if (!the_div.data("obj").add_plot(ssc)) return;
            the_div.find('.date_button_execute').trigger('click');
            saveCurrentState();
        } // addSelectedPlotToWindow

        function updateEditing() {
            if (!gridster) return;
            var awidth = 50;
            if ( isEditing ) {
              $('.gridster li > .header', theCurrentPage)
                                  .width(awidth + "px")
                                  .show()
                                  .siblings(':not(.gs-resize-handle)')
                                  .css('left', awidth + "px");
              gridster.enable_resize();
            } else {
              $('.gridster li > .header', theCurrentPage)
                                  .width("0px")
                                  .hide()
                                  .siblings(':not(.gs-resize-handle)')
                                  .css('left', "0px");
              gridster.disable_resize();
            }
            $('.gridster li', theCurrentPage).each( function() {
              $(this).data('obj').show_options(isEditingVars);
            });
            $('li .window_designation', theCurrentPage).each( function() {
              if (!showWindowNumbers) {
                $(this).hide();
              } else {
                var h = $(this).show().height();
                $(this).css("font-size", parseInt(h*0.7) + "px")
                       .css("line-height", h + "px");
              }
            });
            saveCurrentState();
        }

        $('.edit_layout, .edit_variables, .win_nums', theCurrentPage).on("click", function(ev) {
          isEditing = $('.edit_layout', theCurrentPage).is(":checked");
          isEditingVars = $('.edit_variables', theCurrentPage).is(":checked");
          showWindowNumbers = $('.win_nums', theCurrentPage).is(":checked");
          updateEditing();
        });
        $('.makeNewPlot', theCurrentPage).on('click', function() {
          makeNewGraph( {
            position: [6, 3, 1, 1],
            variables: []
          });
        });

        $('.addSlowControl', theCurrentPage).on('click', addSelectedPlotToWindow );

        nedm.page.once( 'load', function(ev, ui) {
            nedm.get_database("nedm_head").getDoc("graph_template",
               function(e, o) {
                   graph_template = o;
                   /* jshint ignore:start */
                   graph_template.script = eval('(' + o.script + ')');
                   /* jshint ignore:end */
                   getAvailableItems();
                   $('.makeNewPlot', theCurrentPage).removeClass('ui-disabled');
                   populateGraphsFromState();
               }
            );

        });
"""
}
