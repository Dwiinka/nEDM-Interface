{
  "_id" : "graph_template",
  "type" : "view_template",
  "title" : "",
  "description" : "",
  "html" : """
  <div class = 'show_plot'>
  </div>
  <!-- Legend -->
  <div class = 'monitor_options'>
    <!-- Advanced options -->
    <div class='ui-grid-b'>
      <div class='ui-block-a'>
        <h5>Start:</h5>
        <h5>End:</h5>
      </div>
      <div class='ui-block-b all_date_boxes'>
      </div>
      <div class='ui-block-c all_time_boxes'>
      </div>
    </div>
    <div class='ui-grid-a'>
      <div class="ui-block-a">
        <div class='ui-field-contain plot_legend'>
          <fieldset data-role='controlgroup' data-type='horizontal'>
            <a href='#' data-role='button' data-inline='true' class='ui-disabled remove_plotted'>
              Remove
            </a>
            <select class='plotted_vars' multiple='multiple' data-native-menu='false'>
              <option>Select variable(s):</option>
            </select>
          </fieldset>
        </div>
      </div>

      <div class="ui-block-b">
        <div class='ui-field-contain'>
          <fieldset data-role='controlgroup' data-type='horizontal'>
            <label><input type='checkbox' class='check_box_until_now'/>Live</label>
            <select class='averaging_select'/>
            <button class='ui-btn ui-corner-all date_button_execute'>Set times</button>
          </fieldset>
        </div>
      </div>
    </div>
    <div class='variable_progress'></div>
  </div>
  """,
  "script" : """
  function(avar, anobj) {
    var new_div = $(avar),
        avg_select = $('.averaging_select', new_div),
        show_plot = $('.show_plot', new_div),
        options = $('.monitor_options', new_div);
    if (!anobj) anobj = {};
    $.each({
      'Avg: None'  : 10,
          'Minutes': 6,
          'Hours'  : 5,
          'Days'   : 4,
          'Months' : 3,
          'Years'  : 2,
          'All'    : 1,
    }, function(t, v) {
        avg_select.append($('<option/>').val(v).html(t));
    });
    new_div.trigger('create');
    // Get a datebox
    var gimme_datebox = function(atype, aclass) {
         var opts = { mode : atype,
                      lockInput : false,
                      showInitialValue : true,
                      useNewStyle : true };
         return $('<input>').attr({ type : 'text',
                                    'data-role' : 'datebox',
                                    'class'     : aclass,
                                    'data-options' : JSON.stringify(opts)});
    };


    $('.all_date_boxes', new_div).append(gimme_datebox('calbox', 'date_begin'))
                                 .append(gimme_datebox('calbox', 'date_end'))
                                 .trigger('create');
    $('.all_time_boxes', new_div).append(gimme_datebox('timebox', 'time_begin'))
                                 .append(gimme_datebox('timebox', 'time_end'))
                                 .trigger('create');
    var now = new Date(Date.now() - 600000);
    var now2 = new Date(now);
    var tb = $('.time_begin', new_div);
    tb.datebox();
    tb.datebox('setTheDate', now)
      .trigger('datebox',
      { method: 'set',
        value:  tb.datebox('callFormat', '%H:%M', now)});
    now2.setHours(0);
    now2.setMinutes(0);
    $('.date_begin', new_div).datebox();
    $('.date_begin', new_div).datebox('setTheDate',now2);

    var adb = nedm.get_database();
    if (anobj.db) adb = anobj.db;
    var obj = new nedm.MonitoringGraph(show_plot[0], [], now, adb, {
      height: 0
    });

    avg_select.on('change', function() {
      obj.setGroupLevel($(this).val());
    });
    var ensure_until_now_state = function() {
        var until_now = $('.check_box_until_now', new_div).is(':checked');
        if ( until_now ) {
          $('.date_end', new_div).addClass('ui-disabled');
          $('.time_end', new_div).addClass('ui-disabled');
        } else {
          $('.date_end', new_div).removeClass('ui-disabled');
          $('.time_end', new_div).removeClass('ui-disabled');
        }
        return until_now;
    };

    var get_new_progress = function (aname, xhr) {
        var retDiv = $('<div/>')
            .attr('data-role', 'fieldcontain')
            .append(
        $('<fieldset/>')
            .attr({
            'data-role': 'controlgroup',
                'data-type': 'horizontal'
        })
            .append($('<a/>')
            .attr({
            'data-role': 'button',
                'data-icon': 'nedm-loading',
                'data-iconpos': 'right',
                'class': 'cancel_button'
        })
            .append('Cancel '))
            .append($('<a/>').attr({
            'data-role': 'button',
                'class': 'ui-disabled loading_view'
        })
            .append(aname + ' loading: '))
            .data({
            varname: aname
        }));
        retDiv.data({
            varname: aname,
        });
        $('.cancel_button', retDiv).on('click',

        function () {
            $(this).addClass('ui-disabled');
            xhr.abort();
        });
        return retDiv;
    };
    var change_dates = function(eve) {
        var get_new_date = function(prefix) {
            var the_date = $('.date_' + prefix, new_div).datebox('getTheDate');
            var the_time = $('.time_' + prefix, new_div).datebox('getTheDate');
            the_date.setHours( the_time.getHours() );
            the_date.setMinutes( the_time.getMinutes() );
            the_date.setSeconds( the_time.getSeconds() );
            return the_date;
        };
        $('.monitor_options', new_div).addClass('ui-disabled');
        var start_date = get_new_date('begin');
        var end_date = get_new_date('end');
        var until_now = ensure_until_now_state();
        if (until_now) end_date = 0;
        var current_progress = $('.variable_progress', new_div);
        var name = obj.name();
        var update_function = function (objs) {
            current_progress.find('[data-role=fieldcontain]').each(function () {
                var o = $(this).data();
                if (o.varname != objs.variable) return;
                if (!objs || objs.done) {
                    $(this).remove();
                    return;
                }
                var loaded = objs.progress.loaded;
                if (objs.progress.lengthComputable) {
                  loaded /= objs.progress.total;
                }
                $(this).find('.loading_view')
                .text(o.varname + ' loaded: ' +
                      loaded.toString());
            });
            if (current_progress.find('[data-role=fieldcontain]').length === 0) {
                $('.monitor_options', new_div).removeClass('ui-disabled');
            }
        };
        var ret_obj = obj.changeTimeRange(start_date, end_date, update_function);
        for (var k in ret_obj) {
            current_progress.append(get_new_progress(k, ret_obj[k]));
        }
        current_progress.trigger('create');
    };


    $('.date_button_execute', new_div).on('click', change_dates);
    $('.check_box_until_now', new_div).on('change', function() {
        ensure_until_now_state();
        $('.date_button_execute', new_div).trigger('click');
    });
    $('.remove_plotted', new_div).on('click', function() {
      var ssc = $('select.plotted_vars', new_div).find(':selected');
      var rem_names = $.makeArray(ssc.map(function() { return $(this).val(); }));
      obj.removeDataName(rem_names, function() {
        ssc.remove();
        var plt = $('select.plotted_vars', new_div);
        if (plt.find('option').length <= 1) {
          $('.remove_plotted', new_div).addClass('ui-disabled');
        }
        plt.selectmenu('refresh', true);
      });
    });
    $('.check_box_until_now', new_div).trigger('click');

    this.resize = function() {
      show_plot.css("bottom", (options.height() + 10) + "px");
      obj.graph.resize();
    };
    this.show_options = function(show) {
      if (!show) {
        options.hide()
		       .height("0px");
      } else {
        options.show();
        var sh = options[0].scrollHeight;
        options.height(sh + "px");
      }
      this.resize();
    };
    this.remove = function() {
       obj.destroy();
    };
    this.graph = function() {
       return obj;
    };

    this.add_plot = function(aname) {
       var retVal = false;
       if (! obj.addDataName(aname) ) return retVal;
       retVal = true;
       $('.date_button_execute', new_div).trigger('click');
       if (!Array.isArray(aname)) {
         aname = [ aname ];
       }
       var plotted_vars = $('select.plotted_vars', new_div);
       aname.forEach( function(ev) {
           if ( $('option[value="' + ev + '"]', plotted_vars).length >= 1 ) return;
           plotted_vars.append($('<option/>').val(ev).text(ev));

       });
       plotted_vars.selectmenu('refresh', true);
       $('.remove_plotted', new_div).removeClass('ui-disabled');
    };

  }
  """
}
