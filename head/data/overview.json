{
  "_id"  : "overview",
  "type" : "control_template",
  'body' : """
            <h1 >Overview</h1>
            <div class='gridster'>
              <ul>
              </ul>
            </div>
            <div data-role='controlgroup' data-type='horizontal'>
                <label><input type='checkbox' class='edit_current'/>Move/Resize</label>
            </div>
            <div class='set_new_variable'>
              <h2>Add variable (requires admin rights)</h2>
              <div data-role='controlgroup' data-type='horizontal'>
                  <select class='all_dbs'></select>
                  <select class='variable_for_db'></select>
                  <button class='submit_new_variable'>Submit</button>
              </div>

            </div>
""",
  'script' : """
    var delete_btn_txt = "<div class='header'><button class='delete_over_var ui-btn ui-shadow ui-corner-all ui-icon-minus ui-btn-icon-notext'>Delete</button></div>";
    var dbs = {};
    var gridster;
    var isEditing = false;
    function delete_overview_var(ev) {
        var id = $(ev.currentTarget).data('id');
        gridster.remove_widget($(ev.currentTarget).closest('li'));
        nedm.get_database('nedm_head').getDoc(id,
          function(e, doc) {
            if (e !== null) return;
            nedm.get_database('nedm_head').removeDoc(doc, function(ee, o) {
              if (ee) {
                nedm.show_error_window(ee.error, ee.reason);
              }
              refresh_all();
            });
          });
    }

    function serializePositions($w, wgd) {
      return {
        col: wgd.col,
        row: wgd.row,
        size_x: wgd.size_x,
        size_y: wgd.size_y,
        var_name: $w.data().var_name,
        id: $w.data().id
      };
    }

    function positionKey(var_name, id) {
      return var_name + "," + id;
    }
    function savePositions() {
      var obj = {};
      gridster.serialize().forEach( function(o) {
        obj[positionKey(o.var_name, o.id)] = [o.size_x, o.size_y, o.col, o.row];
      });
      nedm.globalSetting("overview_head", obj);
    }

    function getPosition(var_name, id) {
      var gs = nedm.globalSetting("overview_head");
      if ( typeof gs === 'undefined' ) return undefined; 
      return gs[positionKey(var_name, id)];
    }

    function get_gridster() {
      if (gridster) return gridster;
      $('.gridster', theCurrentPage).empty();
      $('.gridster', theCurrentPage).append($('<ul/>'));
      gridster = $('.gridster > ul', theCurrentPage).gridster({
          widget_base_dimensions: [100, 55],
          //widget_class: ".widget",
          widget_margins: [5, 5],
          helper: 'clone',
          draggable: {
              handle: ".header"
          },
          autogrow_cols : true,
          serialize_params : serializePositions,
          resize: {
              enabled: true,
              stop: resize,
              resize: resize
          }
      }).data('gridster');
      return gridster;
    }

    function get_overview_vars(all_dbs) {
        nedm.get_database('nedm_head').getView('overview_vars',
                                               'overview_vars',
           { opts : { reduce : false } },
           function( e, o ) {
             if (e !== null) return;
             var now = new Date(Date.now() - 600000),
                 k,
                 r = o.rows,
                 current_shown = $('.gridster ul li', theCurrentPage).map( function() {
                   return $(this).data('var_name');
                 }).toArray(),
                 grid = get_gridster();


             for (var i=0;i<r.length;i++) {
               k = r[i].key[0];
               var v = r[i].key[1];
               var id = r[i].id;
               if (! (k in dbs) ) {
                 var dbn = /nedm%2F(.*)/.exec(k)[1];
                 if (!(dbn in all_dbs)) continue;
                 dbs[k] = { prettyname : all_dbs[dbn].prettyname, vars : {}};
               }
               dbs[k].vars[v] = id;
               var thename = dbs[k].prettyname + ": " + v;
               if (current_shown.indexOf(thename) !== -1) continue;
               var widget = ["<li>" + delete_btn_txt + "<div class='graph_show'></div></li>"];
               var pos = getPosition(thename, id);
               if (pos) {
                 widget.push.apply(widget, pos);
               } else {
                 widget.push(4, 2);
               }
               var new_clone = grid.add_widget.apply(grid, widget);
               var gr = new nedm.MonitoringGraph($('.graph_show', new_clone)[0],
                 [v], now, nedm.get_database(k), {
                   title : thename,
                   height : 0
               });
               $('.graph_show', new_clone).data('graph', gr);
               new_clone.data({var_name : thename, id : id});
               $('.delete_over_var', $(new_clone)).data('id', id);
               if ( id === 'overview_vars_default') $('.delete_over_var', $(new_clone)).addClass('ui-disabled');
             }
             // Set up the button functions
             $('.delete_over_var', theCurrentPage).off().on('click', delete_overview_var);
             updateEditing();


             function get_vars_for_db(x) {
               return function(keys) {
                 x.data( { all_keys : keys } );
                 if ( x.prop('selected') ) $('.all_dbs', theCurrentPage).filter(':input').trigger('change');
               };
             }
             var adb = $('.all_dbs', theCurrentPage).filter(':input');
             adb.find('option').remove();
             for (var kk in all_dbs) {
               var obj = $('<option/>').val(kk).text(all_dbs[kk].prettyname);
               var d = 'nedm%2F' + kk;
               obj.data({ db_name : d });
               adb.append(obj);
               nedm.get_database(d).getVariableNames( get_vars_for_db( obj ) );
             }
             adb.selectmenu('refresh', true);
      });
    }
    function resize(ev, ui, $widget) {
        $('.graph_show', $widget).data('graph').graph.resize();
    }
    function refresh_all() {
      nedm.get_database_info(function(d) {
        get_overview_vars(d);
      });
    }
    function submit_new_variable() {
      var d = $('.all_dbs :selected', theCurrentPage).data('db_name');
      var vn = $('.variable_for_db :selected', theCurrentPage).text();
      var submit_o = { type : 'overview_vars', vars : {} };
      submit_o.vars[d] = [vn];
      nedm.get_database('nedm_head').updateDoc(
       submit_o, 'nedm_default', 'insert_with_timestamp', function(e,o) {
         if (e) {
           nedm.show_error_window(e.error, e.reason);
         } else refresh_all();
       });
    }

    function updateEditing() {
      var awidth = 50;
      if ( isEditing ) {
        $('.gridster li > .header', theCurrentPage).width(awidth + "px").show();
        $('.gridster li > .graph_show', theCurrentPage).css('left', awidth + "px").each( function() {
          $(this).data('graph').graph.resize();
        });
        gridster.enable_resize();
      } else {
        $('.gridster li > .header', theCurrentPage).width("0px").hide();
        $('.gridster li > .graph_show', theCurrentPage).css('left', "0px").each( function() {
          $(this).data('graph').graph.resize();
        });
        gridster.disable_resize();
        savePositions();
      }
    }

    nedm.page.once("load", function() {
      refresh_all();
      $('.all_dbs', theCurrentPage).change( function(ev) {
        var opt = $(':selected', $(ev.currentTarget));
        var vdb = $('.variable_for_db', theCurrentPage).filter(':input');
        vdb.find('option').remove();
        opt.data('all_keys').forEach( function(o) { vdb.append($('<option/>').val(o).text(o)); } );
        vdb.selectmenu('refresh', true);
      });
      $('.submit_new_variable', theCurrentPage).on('click', submit_new_variable);
      $('.edit_current', theCurrentPage).on('click', function(ev) {
        isEditing = $(ev.currentTarget).is(":checked");
        if ( isEditing ) {
          $(ev.currentTarget).text("End edit");
        } else {
          $(ev.currentTarget).text("Edit current");
        }
        updateEditing();
      });
    });
"""
}
